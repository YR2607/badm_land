import { createClient } from '@sanity/client';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '../.env') });

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Sanity
const client = createClient({
  projectId: process.env.SANITY_STUDIO_PROJECT_ID,
  dataset: process.env.SANITY_STUDIO_DATASET || 'production',
  token: process.env.SANITY_STUDIO_TOKEN, // –ù—É–∂–µ–Ω —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å
  apiVersion: '2024-01-01',
  useCdn: false,
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.SANITY_STUDIO_PROJECT_ID) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SANITY_STUDIO_PROJECT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

if (!process.env.SANITY_STUDIO_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SANITY_STUDIO_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  console.log('\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ Sanity:');
  console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://www.sanity.io/manage');
  console.log('   2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
  console.log('   3. API ‚Üí Tokens ‚Üí Add API token');
  console.log('   4. –ü—Ä–∞–≤–∞: Editor');
  console.log('   5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª');
  process.exit(1);
}

async function importData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Sanity...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    const strategyPath = path.join(__dirname, '../initial-data/aboutStrategy.json');
    const roadmapPath = path.join(__dirname, '../initial-data/aboutRoadmap.json');

    const strategyData = JSON.parse(fs.readFileSync(strategyPath, 'utf-8'));
    const roadmapData = JSON.parse(fs.readFileSync(roadmapPath, 'utf-8'));

    console.log('üìÑ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    console.log('\nüìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...');
    const strategyDoc = {
      _id: 'aboutStrategy',
      _type: 'aboutStrategy',
      ...strategyData,
    };

    await client.createOrReplace(strategyDoc);
    console.log('‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–∞–¥–º–∞–ø
    console.log('\nüìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è...');
    const roadmapDoc = {
      _id: 'aboutRoadmap',
      _type: 'aboutRoadmap',
      ...roadmapData,
    };

    await client.createOrReplace(roadmapDoc);
    console.log('‚úÖ –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:');
    console.log('   - –°—Ç—Ä–∞—Ç–µ–≥–∏—è (–º–∏—Å—Å–∏—è, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ü–µ–ª–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)');
    console.log('   - –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è (5 –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –≥–æ–¥–∞–º)');
    console.log('   - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ 3 —è–∑—ã–∫–∞—Ö (RU, EN, RO)');
    console.log('\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ Sanity Studio –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:');
    console.log('   - "–û –∫–ª—É–±–µ ‚Äî –°—Ç—Ä–∞—Ç–µ–≥–∏—è"');
    console.log('   - "–û –∫–ª—É–±–µ ‚Äî –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è"');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importData();
